% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brix_fitter.R
\name{brix_fitter}
\alias{brix_fitter}
\title{Fitting regression models of all combinations of covariates using brix}
\usage{
brix_fitter(response, predictor, ll, data)
}
\arguments{
\item{response}{\code{character}, response variable name.}

\item{predictor}{\code{character}, vector of predictor variable names.}

\item{ll}{log-likelihood function, see \code{\link{log_likelihood}}.}

\item{data}{\code{data.frame}, the dataset used for regression.}
}
\value{
\code{brix_fitter} returns a \strong{list} of objects of \code{\link{class}} "brix".
Each object in the list is a model. If there are \eqn{n =} \code{length(predictor)}
covariates (excluding the intercept), then there are \eqn{2^n} different model
combinations. See \code{\link{brix}} for more infomation.
}
\description{
Helper function for fitting regression models of all combinations of covariates
using brix, see \code{\link{brix}}.
}
\details{
See \code{\link{brix}}.
}
\examples{
response <- "claim"

### Fitting Poisson log-link models (and measuring time):

predictor <- c("age", "brt", "dwt")

start.time1 <- Sys.time()
fit1 <- brix_fitter(response = response,
                    predictor = predictor,
                    log_likelihood(poisson(link = 'log')),
                    data = policy_data)
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1

### Comparison with glm
fit1[[8]]
glm(claim ~ age + brt + dwt, data = policy_data, family = poisson('log'))

\dontrun{
### Fitting zero-modified log-link models (takes several minutes to run)

predictor <- c("age", "brt", "dwt", "value", "hp", "year", "code")

start.time2 <- Sys.time()
fit2 <- brix_fitter(response = response,
                    predictor = predictor,
                    log_likelihood(zmpoisson(link = 'log')),
                    data = policy_data)
end.time2 <- Sys.time()
time.taken2 <- end.time2 - start.time2
time.taken2

fit2[[128]]

### Extracting BIC values and finding the model with the smallest value
bic <- unlist(lapply(fit2, '$.data.frame', 'BIC'))
which.min(bic)

which(bic \%in\% sort(lowest)[1:4])

plot(bic)
}

}
